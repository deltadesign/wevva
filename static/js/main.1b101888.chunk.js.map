{"version":3,"sources":["ApiClient.js","App.js","serviceWorker.js","index.js"],"names":["ApiClient","response","status","Promise","resolve","reject","Error","text","this","getRequest","url","axios","get","then","catch","error","console","log","alert","App","props","state","loading","weather","map","item","i","key","dt","getForecast","setState","data","daily","getweather","className","JSON","stringify","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wRAEaA,EAAb,+FAESC,GACL,OAAIA,EAASC,QAAS,KAAOD,EAASC,OAAQ,IACrCC,QAAQC,QAAQH,GAEhBE,QAAQE,OAAO,IAAIC,MAAML,EAASM,SAN/C,oCAWI,OAAOC,KAAKC,WAAW,6JAX3B,iCAcaC,GACT,OAAOC,IACJC,IAAIF,GACJG,KAAKL,KAAKN,QACVY,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZG,MAAMH,UApBd,KCmDeI,E,kDA9Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTC,QAAU,IAEZ,EAAKvB,UAAY,IAAIA,EANJ,E,sDAUjB,OAAOQ,KAAKa,MAAME,QAAQC,KAAI,SAACC,EAAMC,GAAP,OAC5B,6BACA,wBAAIC,IAAMD,GAAKD,EAAKG,U,mCAKT,IAAD,OACZpB,KAAKR,UAAU6B,cAAchB,MAAK,SAACZ,GAEjC,EAAK6B,SAAS,CACZR,SAAS,EACTC,QAAStB,EAAS8B,KAAKC,a,0CAM3BxB,KAAKyB,e,+BAIP,OACE,yBAAKC,UAAY,OAEf,6BAAMC,KAAKC,UAAU5B,KAAKa,QAEzBb,KAAKa,MAAMC,QAAU,aAAe,6BAEpCd,KAAKe,e,GAxCMc,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdvC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuC,c","file":"static/js/main.1b101888.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport class ApiClient {\r\n\r\n  status(response) {\r\n    if (response.status>= 200 && response.status <300) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(new Error(response.text))\r\n    }\r\n  }\r\n\r\n  getForecast() {\r\n    return this.getRequest(\"https://api.openweathermap.org/data/2.5/onecall?lat=53.402460&lon=-1.503170&exclude=hourly,minutely&units=metric&appid=0c0115c73dc56a1a10b2e6f717f9c859\");\r\n  }\r\n\r\n  getRequest(url) {\r\n    return axios\r\n      .get(url)\r\n      .then(this.status)\r\n      .catch((error) => {\r\n        console.log(error)\r\n        alert(error)\r\n      })\r\n  }\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport { ApiClient } from './ApiClient'\n\n// https://deltadesign.github.io/wevva/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      weather : []\n    }\n    this.ApiClient = new ApiClient();\n  }\n\n  weather(){\n    return this.state.weather.map((item, i)=> (\n      <div>\n      <h2 key= {i} >{item.dt}</h2> \n      </div>\n    ))\n  }\n\n  getweather () {\n    this.ApiClient.getForecast().then((response) => {\n      // console.log(response.data.daily)\n      this.setState({\n        loading: false,\n        weather: response.data.daily\n      })\n    })\n  }\n\n  componentDidMount(){\n    this.getweather()\n  }\n\n  render () {\n  return (\n    <div className = \"app\">\n\n      <pre>{JSON.stringify(this.state)}</pre>\n\n      {this.state.loading ? \"Loading...\" : \"Here's your 5 day forecast\"}\n\n      {this.weather()}\n\n    </ div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}