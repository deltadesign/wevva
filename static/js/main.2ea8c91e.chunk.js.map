{"version":3,"sources":["components/bubbles.js","components/weathercard.js","ApiClient.js","components/randoload.js","App.js","serviceWorker.js","index.js"],"names":["Bubble","className","this","props","title","value","React","Component","WCard","day","Date","parseInt","datestring","nameDay","getDay","month","getMonth","year","getFullYear","date","getDate","wind","Math","round","min","max","text","icon","Card","Header","as","Body","Subtitle","Img","src","alt","Text","ApiClient","response","status","Promise","resolve","reject","Error","getRequest","url","axios","get","then","catch","error","console","log","alert","Random","ceil","random","App","state","loading","weather","slice","map","item","i","key","dt","description","temp","wind_speed","setTimeout","getForecast","setState","data","daily","getweather","Navbar","bg","variant","Brand","getRandomMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2ea8c91e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Bubble extends React.Component {\r\n\r\n  render () {\r\n    return (\r\n      <div className = \"bubble\">\r\n        <h6>{this.props.title}</h6>\r\n        <h6>{this.props.value}</h6>   \r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/card';\r\nimport Bubble from './bubbles'\r\n\r\nclass WCard extends React.Component {\r\n  render () {\r\n\r\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\",\"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n  const months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n  const day = new Date(parseInt(this.props.datestring)*1000);\r\n  const nameDay = days[day.getDay(day)];\r\n  const month = months[day.getMonth(day)];\r\n  const year = day.getFullYear(day);\r\n  const date = day.getDate(day);\r\n  const wind = `${Math.round(this.props.wind / 1.609, 1)} mph`;\r\n  const min = `${Math.round(this.props.min,1)} °c`;\r\n  const max = `${Math.round(this.props.max,1)} °c`;\r\n  const text = this.props.text;\r\n  const icon = `http://openweathermap.org/img/wn/${this.props.icon}@2x.png`;\r\n\r\n  return (\r\n\r\n    <Card className = \"weathercard\" >\r\n      <Card.Header as=\"h4\">{nameDay}</Card.Header>\r\n      <Card.Body>\r\n        <Card.Subtitle>{date} - {month} - {year}</Card.Subtitle>\r\n        <Card.Img className = \"image\" src = {icon} alt = {text}></Card.Img>   \r\n        <Card.Text>{text}</Card.Text>\r\n        <div className = \"bubblebox\">\r\n        <Bubble title = \"Wind\" value = {wind}/>\r\n        <Bubble title = \"Min\" value = {min}/>\r\n        <Bubble title = \"Max\" value = {max}/>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  )}\r\n}\r\n\r\nexport default WCard","import axios from 'axios'\r\n\r\nexport class ApiClient {\r\n\r\n  status(response) {\r\n    if (response.status>= 200 && response.status <300) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(new Error(response.text))\r\n    }\r\n  }\r\n\r\n  getForecast() {\r\n    return this.getRequest(\"https://api.openweathermap.org/data/2.5/onecall?lat=53.402460&lon=-1.503170&exclude=hourly,minutely&units=metric&appid=0c0115c73dc56a1a10b2e6f717f9c859\");\r\n  }\r\n\r\n  getRequest(url) {\r\n    return axios\r\n      .get(url)\r\n      .then(this.status)\r\n      .catch((error) => {\r\n        console.log(error)\r\n        alert(error)\r\n      })\r\n  }\r\n\r\n}","\r\nexport class Random  {\r\n\r\ngetRandomMessage(){\r\nlet randomNumber = Math.ceil(Math.random() * 5);\r\n\r\nswitch(randomNumber){\r\n  case 1:\r\n    return \"STAND BY FOR WEATHER\";\r\n\r\n  case 2: \r\n    return \"Hang on.. we're on a coffee break\";\r\n\r\n  case 3: \r\n    return \"It might be quicker to look out of the window..\";\r\n\r\n  case 4: \r\n    return \"Weather mining is hard work\";\r\n\r\n  case 5: \r\n    return \"Weathering the storm of API requests\"\r\n  \r\n  default:\r\n    return \"...Loading..\"\r\n}\r\n}\r\n}\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/navbar';\nimport Wcard from './components/weathercard';\nimport { ApiClient } from './ApiClient';\nimport { Random } from './components/randoload';\nimport './App.css';\n\n// https://deltadesign.github.io/wevva/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      weather : []\n    }\n    this.ApiClient = new ApiClient();\n    this.Random = new Random();\n  }\n\n  weather(){\n    return this.state.weather.slice(1,6).map((item, i)=> (  \n      <Wcard key= {i}\n        datestring ={item.dt}\n        icon = {item.weather[0].icon}\n        text = {item.weather[0].description}\n        min = {item.temp.min}\n        max = {item.temp.max} \n        wind = {item.wind_speed}\n      />\n    ))\n  }\n\n  getweather () {\n    setTimeout (() => {\n    this.ApiClient.getForecast().then((response) => {\n      this.setState({\n        loading: false,\n        weather: response.data.daily\n      })\n    })},2000)\n  }\n\n  componentDidMount(){\n    this.getweather()\n  }\n\n  render () {\n  return (\n    <>\n      <Navbar bg = \"dark\" variant = \"dark\">\n        <Navbar.Brand>{this.state.loading ? this.Random.getRandomMessage() : \"Wevva\"}</Navbar.Brand>\n      </Navbar>\n    <div className = \"app\">\n      {this.weather()}\n    </div>\n    </>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}